<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01.Bash概述</title>
    <url>/2021/07/27/Bash%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>
<span id="more"></span>
<h1 id="1-Bash-Shell初步认识"><a href="#1-Bash-Shell初步认识" class="headerlink" title="1.Bash Shell初步认识"></a>1.Bash Shell初步认识</h1><h2 id="1-什么是Bash-shell-壳"><a href="#1-什么是Bash-shell-壳" class="headerlink" title="1.什么是Bash shell(壳)"></a>1.什么是Bash shell(壳)</h2><p><em>Bash Shell 是一个命令解释器，它在操作系统的最外层，负责用户程序与内核进行交互操作的一种接口，将用户输入的命令翻译给操作系统，并将处理后的结果输出至屏幕。</em></p>
<p><img src="/images/QQ%E6%88%AA%E5%9B%BE20210727093855.png" alt="imageTitle"></p>
<p><em>当我们使用远程连接工具连接linux服务，系统则会给打开一个默认的shell，我们可在这个界面执行命令、比如：获取系统当前时间，创建一个用户等等…</em></p>
<h2 id="2-Bash-Shell能干什么"><a href="#2-Bash-Shell能干什么" class="headerlink" title="2.Bash Shell能干什么"></a>2.Bash Shell能干什么</h2><p><em>使用Shell实现对Linux系统的大部分管理，例如:<br> 1.文件管理<br> 2.权限管理<br> 3.用户管理<br> 4.磁盘管理<br> 5.网络管理<br> 6.软件管理<br> .等等.</em></p>
<h2 id="3-平时我们如何使用Shell？"><a href="#3-平时我们如何使用Shell？" class="headerlink" title="3.平时我们如何使用Shell？"></a>3.平时我们如何使用Shell？</h2><p><em>输入命令 –&gt; 效率低 –&gt; 适合少量的工作</em></p>
<p><em>Shell Script(脚本) –&gt; 效率高 –&gt; 适合复杂的重复性高的工作</em></p>
<p><em>例如:创建100个用户，单纯输入命令需要执行100次，而Shell脚本只需要几行命令即可完成100个用户的创建</em></p>
<h2 id="4-Shell提示符"><a href="#4-Shell提示符" class="headerlink" title="4.Shell提示符"></a>4.Shell提示符</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $ = 普通用户, # = root用户(超级管理员)</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line"></span><br><span class="line">[root@web01 ~]<span class="comment"># useradd jack</span></span><br><span class="line">[root@web01 ~]<span class="comment"># passwd jack</span></span><br><span class="line">Changing password <span class="keyword">for</span> user jack.</span><br><span class="line">New password:</span><br><span class="line">BAD PASSWORD: The password is a palindrome</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-Shell基础语法"><a href="#5-Shell基础语法" class="headerlink" title="5.Shell基础语法"></a>5.Shell基础语法</h2><p><em>命令行bash shell，为用户提供输入，执行命令的界面</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#命令  选项  参数</span></span><br><span class="line"><span class="built_in">command</span> [-options] [arguments]</span><br><span class="line"></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls             #命令</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls -a          #命令+选项</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls -a /home/   #命令+选项+参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命令: 整条shell命令的主体</span></span><br><span class="line"><span class="comment">#选项: 用于调节命令的具体功能</span></span><br><span class="line">    <span class="comment">#以 “-”引导短格式选项（单个字符），例如“-l”</span></span><br><span class="line">    <span class="comment">#以“--”引导长格式选项（多个字符），例如“--color”</span></span><br><span class="line">    <span class="comment">#多个短格式选项可以写在一起，只用一个“-”引导，例如“-al”</span></span><br><span class="line"><span class="comment">#参数: 命令操作的对象，如文件、目录名等</span></span><br><span class="line"><span class="comment"># 命令必须开头， 选项和参数位置可以发生变化</span></span><br></pre></td></tr></table></figure>

<h1 id="2-Bash-Shell基本特性"><a href="#2-Bash-Shell基本特性" class="headerlink" title="2.Bash Shell基本特性"></a>2.Bash Shell基本特性</h1><h3 id="1-命令补全"><a href="#1-命令补全" class="headerlink" title="1.命令补全"></a><em>1.命令补全</em></h3><p><em>当时用windows查找一个目录层级特别多的文件时，打开的效率会非常慢，但如果使用linux查找一个目录层级特别多的文件时，可以通过tab键快速的补全</em></p>
<p><em>PS:tab键可以实现命令补全，路径补全，在实际生产中tab补全往往是我们使用的最多的, 因为可以减少执行命令以及路径出错率.</em></p>
<h3 id="2-命令快捷键"><a href="#2-命令快捷键" class="headerlink" title="2.命令快捷键"></a><em>2.命令快捷键</em></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ctrl+a <span class="comment">#光标跳转至正在输入的命令行的首部</span></span><br><span class="line">ctrl+e <span class="comment">#光标跳转至正在输入的命令行的尾部</span></span><br><span class="line">ctrl+c <span class="comment">#终止前台运行的程序</span></span><br><span class="line">ctrl+d <span class="comment">#在shell中，ctrl+d表示退出当前shell</span></span><br><span class="line">ctrl+z <span class="comment">#将任务暂停，挂至后台</span></span><br><span class="line">ctrl+l <span class="comment">#清屏，和clear命令等效</span></span><br><span class="line">ctrl+k <span class="comment">#删除从光标到行末的所有字符</span></span><br><span class="line">ctrl+u <span class="comment">#删除从光标到行首的所有字符</span></span><br><span class="line">ctrl+r <span class="comment">#搜索历史命令，利用关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在命令行前加面加 &quot;#&quot; 则该命令不会被执行，一般用作注释</span></span><br></pre></td></tr></table></figure>

<h3 id="3-历史命令history"><a href="#3-历史命令history" class="headerlink" title="3.历史命令history"></a><em>3.历史命令history</em></h3><p><em>-w 保存命令历史到历史文件<br> -c 清空命令历史记录, 不会情况文件<br> -d 删除命令历史的第 N 条行</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.使用双 !! 可执行上一条执行过的命令</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls</span></span><br><span class="line">xuliangwei.com</span><br><span class="line">[root@xuliangwei ~]<span class="comment"># !!</span></span><br><span class="line">ls</span><br><span class="line">xuliangwei.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.输入!6, 执行history命令历史中第 6 行命令</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># !6</span></span><br><span class="line">touch xuliangwei.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用!cat, 调用history命令历史最近一次执行过的cat命令</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># !cat</span></span><br><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls /etc/passwd</span></span><br><span class="line"><span class="comment">#调用上一条命令的最后参数或选项, 按下ESC松开, 然后按下 &quot;.&quot;</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># cat</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"><span class="comment">#第二种方式, 输入!$</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls !$</span></span><br><span class="line">ls /etc/passwd</span><br><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="4-历史别名"><a href="#4-历史别名" class="headerlink" title="4.历史别名"></a><em>4.历史别名</em></h3><p><em>命令别名将用户经常使用的复杂命令简单化, 可以用<code>&quot;alias 别名名称=命令&quot;</code>命令创建属于自己的命令别名, 若要取消一个命令别名，则是用<code>unalias 别名名称</code>命令。</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.定义临时别名, wk为查看eth0网卡别名</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># alias wk=&#x27;ifconfig&#x27;</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># wk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.如果定义命令本身, 会执行什么?</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># alias ifconfig=&#x27;ifconfig eth0&#x27;</span></span><br><span class="line">    <span class="comment">#绝对路径执行, 调用命令本身</span></span><br><span class="line">    [root@xuliangwei ~]<span class="comment"># /sbin/ifconfig</span></span><br><span class="line">    <span class="comment">#通过\转义字符, 调用命令本身</span></span><br><span class="line">    [root@WebServer ~]<span class="comment"># \ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.取消别名</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># unalias ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.永久生效，/etc/bashrc</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># echo &quot;alias ifconfig=&#x27;ifconfig eth0&#x27;&quot; &gt;&gt; /etc/bashrc</span></span><br></pre></td></tr></table></figure>

<h1 id="3-Bash-Shell获取帮助"><a href="#3-Bash-Shell获取帮助" class="headerlink" title="3.Bash Shell获取帮助"></a>3.Bash Shell获取帮助</h1><h3 id="1-命令-–help帮助"><a href="#1-命令-–help帮助" class="headerlink" title="1.命令 –help帮助"></a><em>1.命令 –help帮助</em></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@xuliangwei ~]<span class="comment"># ls --help</span></span><br><span class="line">用法: ls [选项]...[文件]...</span><br><span class="line"></span><br><span class="line"><span class="comment">#ls 常见选项</span></span><br><span class="line">-a  <span class="comment">#查看目录下的所有文件，包括隐藏文件</span></span><br><span class="line">-l  <span class="comment">#以长格式的方式显示文件的详细内容</span></span><br><span class="line">-h  <span class="comment">#以人性化的方式显示内容，配合-l使用</span></span><br><span class="line">-d  <span class="comment">#只列出目录名，不列出目录以下的内容</span></span><br><span class="line">-t  <span class="comment">#按修改时间进行排序</span></span><br><span class="line">-i  <span class="comment">#显示文件的inode(该文件在该分区的一个编号)</span></span><br><span class="line"></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># date --help</span></span><br><span class="line">Usage: date [OPTION]... [+FORMAT]</span><br><span class="line">  or:  date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><span class="line">  </span><br><span class="line">[root@xuliangwei ~]<span class="comment"># date +%F   #查看日期</span></span><br><span class="line">2019-03-28</span><br><span class="line">[root@xuliangwei ~]<span class="comment"># date -s 12:00  #修改时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间不是用来查看，而是有其他的用途</span></span><br><span class="line">[root@web01 ~]<span class="comment"># touch `date +%F`_file.txt</span></span><br><span class="line">[root@web01 ~]<span class="comment"># ls</span></span><br><span class="line">2019-03-28_file.txt</span><br></pre></td></tr></table></figure>

<h3 id="2-命令man手册"><a href="#2-命令man手册" class="headerlink" title="2.命令man手册"></a><em>2.命令man手册</em></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#man ls #查看ls命令手册</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Linux命令大全传送门"><a href="#3-Linux命令大全传送门" class="headerlink" title="3.Linux命令大全传送门"></a><em>3.Linux命令大全传送门</em></h3><p><em>linux命令大全： <a href="https://man.linuxde.net/">https://man.linuxde.net/</a></em></p>
<p><em>linux命令手册：<a href="http://linux.51yip.com/">http://linux.51yip.com/</a></em></p>
<h1 id="4-Bash-Shell命令流程"><a href="#4-Bash-Shell命令流程" class="headerlink" title="4.Bash Shell命令流程"></a>4.Bash Shell命令流程</h1><h3 id="1-当我们执行一个命令-整个命令执行流程如下"><a href="#1-当我们执行一个命令-整个命令执行流程如下" class="headerlink" title="*1.当我们执行一个命令, 整个命令执行流程如下:"></a>*1.当我们执行一个命令, 整个命令执行流程如下:</h3><ol>
<li>判断命令是否通过绝对路径执行</li>
<li>判断命令是否存在alias别名</li>
<li>判断用户输入的是内部命令还是外部命令</li>
<li>Bash内部命令直接执行，外部命令检测是否存在缓存</li>
<li>通过PATH路径查找命令，有执行，无报错*</li>
</ol>
<h3 id="2-什么是内部命令，什么是外部命令"><a href="#2-什么是内部命令，什么是外部命令" class="headerlink" title="2.什么是内部命令，什么是外部命令"></a><em>2.什么是内部命令，什么是外部命令</em></h3><p> <em>内部命令: shell程序自带的命令。<br> 外部命令: 在系统PATH变量的某个路径下的可执行程序。</em></p>
<h3 id="3-如何检查用户输入的命令是内部命令还是外部命令"><a href="#3-如何检查用户输入的命令是内部命令还是外部命令" class="headerlink" title="3.如何检查用户输入的命令是内部命令还是外部命令"></a><em>3.如何检查用户输入的命令是内部命令还是外部命令</em></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cd命令属于shell内部命令</span></span><br><span class="line">[root@linux-node1 ~]<span class="comment"># type -a cd</span></span><br><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span></span><br><span class="line"><span class="built_in">cd</span> is /usr/bin/<span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ping属于外部命令, 同时会打印当前命令路径</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># type -a  ping</span></span><br><span class="line">ping is /bin/ping</span><br></pre></td></tr></table></figure>

<p><em>4.如果是外置命令，Bash可以通过查找PATH变量，获取该命令的绝对路径。</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前环境变量目录</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>

<p><em>PS: PATH由多个路径组成，每个路径值之间用冒号间隔，对这些路径的增加和删除操作都将影响到Bash解释器对Linux命令的查找</em></p>
<p><em>5.如果是外置命令还会涉及到一个内存缓存，也就是说，当我们出现重复执行相同的命令，会通过缓存调取执行，也就意味着不会搜索PATH路径。</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表缓存命令所在位置</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># hash</span></span><br><span class="line">hits    <span class="built_in">command</span></span><br><span class="line">   1    /usr/bin/tty</span><br><span class="line">   3    /sbin/ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#已缓存命令,如果移动位置会导致无法找到该命令</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># mv /sbin/ifconfig /bin/</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ifconfig</span></span><br><span class="line">-bash: /sbin/ifconfig: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除缓存过的ifconfig命令, 即可执行</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># hash -d ifconfig</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当然可以清空缓存表</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># hash -r</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意: 命令缓存hash需要注意如下情况:</span></span><br><span class="line">1.只要执行外部命令1次就会对该命令进行缓存</span><br><span class="line">2.如果将命令移动了位置，该如何执行</span><br><span class="line">    a.使用绝对路径执行</span><br><span class="line">    b.删除<span class="built_in">hash</span>表的缓存指令</span><br></pre></td></tr></table></figure>

<h3 id="命令执行流程总结-当我们执行了一个ping命令之后-整个命令执行的流程步骤如下"><a href="#命令执行流程总结-当我们执行了一个ping命令之后-整个命令执行的流程步骤如下" class="headerlink" title="命令执行流程总结: 当我们执行了一个ping命令之后, 整个命令执行的流程步骤如下:"></a><em>命令执行流程总结: 当我们执行了一个<code>ping</code>命令之后, 整个命令执行的流程步骤如下:</em></h3><p><em>1) 检查执行的命令是否使用的是绝对路径执行的。<br> 2) 检查ping命令是否存在alias别名<br> 3) 检查ping命令是内部命令还是外部命令<br> 4) 如果是内部命令Bash直接执行，如果是外部命令，首先检查Hash缓存，存在则直接调取<br> 5) 如果该命令不存在Hash缓存，则通过PATH路径进行逐行查找该命令所在的位置<br> 6) 如果PATH路径没有查找到该命令所在的路径，则返回错误码。command not found</em></p>
]]></content>
      <categories>
        <category>基础 -</category>
      </categories>
      <tags>
        <tag>Bash -</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2021/07/26/Linux/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
</search>
